#!/usr/bin/env python3

import datetime
import jinja2
import markdown2
import os
import shutil

MAIN_TEMPLATE = "main.jinja2"  # document template file name
PAGE_TEMPLATE = "page.jinja2"
ARCHIVE_TEMPLATE = "archiv.jinja2"
TAGS_TEMPLATE = "tags.jinja2"
ASSET_PATH = "assets"  # relative path of assets
IMAGE_PATH = "images"
POSTS_PATH = "posts"
PAGES_PATH = "pages"
OUTPUT_PATH = "output"


# read site name from config file
def read_site_config():
    config = {}
    with open(".site-config", "r") as text_file:
        for line in text_file:
            key, value = line.partition(":")[::2]
            config[key.strip()] = value.strip()
    return config


# write text to file
def write_file(filepath, text):
    with open(filepath, "w") as text_file:
        text_file.write(text)


# copy file tree
def copytree(src, dst, symlinks=False, ignore=None):
    for item in os.listdir(src):
        s = os.path.join(src, item)
        d = os.path.join(dst, item)
        if os.path.isdir(s):
            shutil.copytree(s, d, symlinks, ignore)
        else:
            shutil.copy2(s, d)


# delete contents of directory
def clean_directory(path):
    for root, dirs, files in os.walk(path):
        for f in files:
            os.unlink(os.path.join(root, f))
        for d in dirs:
            shutil.rmtree(os.path.join(root, d))


# Returns a rendered template
def parse_template(template_path, var):
    with open(template_path, "r") as template_file:
        doc = template_file.read()
    template = jinja2.Environment(loader=jinja2.FileSystemLoader("templates/")).from_string(doc)
    return template.render(var)


# Returns list of all files in directory
def list_files(directory):
    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]
    return files


# Parses post or page file to split metadata and text
def parse_file(filepath):

    # read text from file
    with open(filepath, "r") as file:
        raw = file.read()

    # split into meta and text
    in_meta = False
    valid_meta = False
    meta = ""
    text = ""
    for line in raw.splitlines():
        if line == "---":
            if not in_meta:
                in_meta = True
            else:
                in_meta = False
                valid_meta = True
        else:
            if in_meta:
                if meta:
                    meta += "\n"
                meta += line
            else:
                if text:
                    text += "\n"
                text += line

    # process meta into array
    article = {"title": os.path.splitext(os.path.basename(filepath))[0],
               "date": "",
               "dateobj": None,
               "type": "",
               "tags": [],
               "image": "",
               "first-menu": "",
               "second-menu": ""}
    if valid_meta:
        for line in meta.splitlines():
            key, value = line.partition(":")[::2]
            if key.strip() == "tags":
                for t in value.strip().split(","):
                    article[key.strip()].append({"title": t.strip(), "url": sanitize(t.strip())})
            else:
                article[key.strip()] = value.strip()

    # date processing
    if not article["date"]:
        article["date"] = datetime.date.today().strftime("%d.%m.%Y")
    article["dateobj"] = datetime.datetime.strptime(article["date"], "%d.%m.%Y")

    # process text into markdown
    md_text = markdown2.markdown(text, extras=["tables"])
    article["text"] = md_text

    # done
    return article


# sanitize title strings for url
def sanitize(url):
    return url.lower().replace(" ", "-").replace("ä", "ae").replace("ö", "oe").replace("ü", "ue")


#
# Main

# Read site config
site_config = read_site_config()

# Read all posts
posts = []
posts_files = list_files(POSTS_PATH)
for post in posts_files:
    info = parse_file((POSTS_PATH+"/"+post))
    info["url"] = sanitize(info["title"])
    info["abstract"] = info["text"].splitlines()[0]  # create abstract
    posts.append(info)
    posts = sorted(posts, key=lambda i: i['dateobj'], reverse=True)

# Read all pages
pages = []
pages_files = list_files(PAGES_PATH)
for page in pages_files:
    info = parse_file((PAGES_PATH+"/"+page))
    info["url"] = sanitize(info["title"])
    pages.append(info)
pages = sorted(pages, key=lambda i: i['order'])

# Delete contents in output path
clean_directory(OUTPUT_PATH)

# Copy assets and images to output path
if not os.path.isdir(OUTPUT_PATH):
    os.mkdir(OUTPUT_PATH)
os.mkdir(OUTPUT_PATH + "/assets")
copytree(ASSET_PATH, OUTPUT_PATH + "/assets")
os.mkdir(OUTPUT_PATH + "/images")
copytree(IMAGE_PATH, OUTPUT_PATH + "/images")
icons = ['favicon.ico',
         'site.webmanifest',
         'favicon-32x32.png',
         'favicon-16x16.png',
         'apple-touch-icon.png',
         'android-chrome-512x512.png',
         'android-chrome-192x192.png']
for icon in icons:
    if os.path.exists(icon):
        shutil.copyfile(icon, OUTPUT_PATH + "/" + icon)

# Compose menu
first_menu = []
second_menu = []
for page in pages:
    if page["first-menu"] == "yes":
        first_menu.append({"title": page["title"], "url": page["url"]})
    if page["second-menu"] == "yes":
        second_menu.append({"title": page["title"], "url": page["url"]})

# Prepare var array
variables = {
    "title": site_config["title"],
    "first_menu": first_menu,
    "second_menu": second_menu,
    "articles": posts,
    "asset_path": ASSET_PATH,
    "image_path": IMAGE_PATH
             }

# Render index page
index = parse_template("templates/" + MAIN_TEMPLATE, variables)
write_file(OUTPUT_PATH + "/index.html", index)

# Render tag pages
tags = []
for post in posts:
    if post["tags"]:
        for tag in post["tags"]:
            if not any(d['title'] == tag['title'] for d in tags):
                tags.append(tag)
for tag in tags:
    variables["tag"] = tag
    parsed = parse_template("templates/" + TAGS_TEMPLATE, variables)
    write_file(OUTPUT_PATH + "/" + tag["url"] + ".html", parsed)

# Render all other pages
for page in pages:
    variables["title"] = site_config["title"] + " - " + page["title"]
    variables["page"] = page
    if page["type"] == "archive":
        variables["articles"] = posts
        parsed = parse_template("templates/" + ARCHIVE_TEMPLATE, variables)
    else:
        parsed = parse_template("templates/" + PAGE_TEMPLATE, variables)
    write_file(OUTPUT_PATH + "/" + page["url"] + ".html", parsed)

# Render post pages
for post in posts:
    variables["title"] = site_config["title"] + " - " + post["title"]
    variables["page"] = post
    parsed = parse_template("templates/" + PAGE_TEMPLATE, variables)
    write_file(OUTPUT_PATH + "/" + post["url"] + ".html", parsed)
